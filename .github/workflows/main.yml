name: Build a Docker image and Push it to ACR

on:
  push:
    branches: main
  pull_request:
    branches: main

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - uses: azure/docker-login@v1
        with:
          login-server: acrgithub.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: build and push voting app
        run: |
          docker build ./vote/ -t acrgithub.azurecr.io/vote:${{ github.sha }}
          docker push acrgithub.azurecr.io/vote:${{ github.sha }}

      - name: build and push result app
        run: |
          docker build ./result/ -t acrgithub.azurecr.io/result:${{ github.sha }}
          docker push acrgithub.azurecr.io/result:${{ github.sha }}

      - name: build and push worker app
        run: |
          docker build ./worker/ -t acrgithub.azurecr.io/worker:${{ github.sha }}
          docker push acrgithub.azurecr.io/worker:${{ github.sha }}
      - name: Get AKS credentials
        env:
          CLUSTER_RESOURCE_GROUP_NAME: ${{ secrets.CLUSTER_RESOURCE_GROUP_NAME }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
        run: |
          az login \
                --service-principal \
                --username ${{ secrets.SERVICE_PRINCIPAL_APP_ID }} \
                --password ${{ secrets.SERVICE_PRINCIPAL_SECRET }} \
                --tenant ${{ secrets.SERVICE_PRINCIPAL_TENANT }}
          az aks get-credentials --resource-group ${{ secrets.CLUSTER_RESOURCE_GROUP_NAME }} --name  ${{ secrets.CLUSTER_NAME }} --overwrite-existing
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Run tests
      run: |
       ls -al
       cd ./result
       npm i
  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2

      - name: Get AKS credentials
        env:
          CLUSTER_RESOURCE_GROUP_NAME: ${{ secrets.CLUSTER_RESOURCE_GROUP_NAME }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
        run: |
          az login \
                --service-principal \
                --username ${{ secrets.SERVICE_PRINCIPAL_APP_ID }} \
                --password ${{ secrets.SERVICE_PRINCIPAL_SECRET }} \
                --tenant ${{ secrets.SERVICE_PRINCIPAL_TENANT }}
          az aks get-credentials --resource-group ${{ secrets.CLUSTER_RESOURCE_GROUP_NAME }} --name  ${{ secrets.CLUSTER_NAME }} --overwrite-existing
 
      - name: Deploy vote/database/redis application
        env:
          ACR_NAME: ${{ secrets.ACR_NAME }}
          IMAGE_REPO: acrgithub.azurecr.io/vote
          VERSION: ${{ github.sha }}
        run: |
          sed -i 's/IMAGE_REPO/acrgithub.azurecr.io\/vote/g; s/VERSION/${{ github.sha }}/g' ./k8s-specifications/vote-deployment.yaml
          sed -i 's/$database/${{ secrets.database }}/g; s/$password/${{ secrets.password }}/g; s/$user/${{ secrets.user }}/g' ./k8s-specifications/db-secret.yaml
          kubectl apply -f ./k8s-specifications/db-secret.yaml
          kubectl apply -f ./k8s-specifications/db-deployment.yaml
          kubectl apply -f ./k8s-specifications/db-service.yaml    
          kubectl apply -f ./k8s-specifications/redis-deployment.yaml
          kubectl apply -f ./k8s-specifications/redis-service.yaml    
          kubectl apply -f ./k8s-specifications/vote-deployment.yaml
          kubectl apply -f ./k8s-specifications/vote-service.yaml
          kubectl rollout status deployment/vote -n vote

      - name: Deploy result application
        env:
          ACR_NAME: ${{ secrets.ACR_NAME }}
          IMAGE_REPO: acrgithub.azurecr.io/result
          VERSION: ${{ github.sha }}
        run: |
          sed -i 's/IMAGE_REPO/acrgithub.azurecr.io\/result/g; s/VERSION/${{ github.sha }}/g' ./k8s-specifications/result-deployment.yaml
          kubectl apply -f ./k8s-specifications/vote-namespace.yml
          kubectl apply -f ./k8s-specifications/result-deployment.yaml
          kubectl apply -f ./k8s-specifications/result-service.yaml
          kubectl rollout status deployment/result -n vote

      - name: Deploy worker application
        env:
          ACR_NAME: ${{ secrets.ACR_NAME }}
          IMAGE_REPO: acrgithub.azurecr.io/worker
          VERSION: ${{ github.sha }}
        run: |
          sed -i 's/IMAGE_REPO/acrgithub.azurecr.io\/worker/g; s/VERSION/${{ github.sha }}/g' ./k8s-specifications/worker-deployment.yaml
          kubectl apply -f ./k8s-specifications/worker-deployment.yaml
          kubectl apply -f ./k8s-specifications/result-service.yaml
          kubectl rollout status deployment/worker -n vote
          kubectl get svc -n vote
